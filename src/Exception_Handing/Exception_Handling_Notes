----------------------------------------------------------------------------------------------------------------------------------------

Java Exception :-
    1) An Exception is an unexpected event that occurs during program execution.
    2) It affects the flow of the program instruction which can cause the program to terminate abnormally.

An Exception can occur for many reasons, Some of them are :-
    - Invalid user input
    - Device failure
    - Loss of Network Connection
    - Physical Limitations (out of Disk Memory)
    - Code Errors
    - Opening an Unavailable File.

----------------------------------------------------------------------------------------------------------------------------------------

Type of Exception :-
    (1) Runtime Exception                  java Main
    (2) Compile-Time (I/O) Exception       javac Main.java


1) Runtime Exception :-
        A runtime exception happens due to a programming error.
        They are also known as unchecked exceptions.
        These exceptions are not checked at compile-time but at run-time.
        E.X. :-    a) Null pointer access (missing the initialization of a variable) - NullPointerException
                   b) Out-of-bounds array access - ArrayIndexOutOfBoundsException
                   c) Dividing a number by 0 - ArithmeticException

        You can think about it is this way, "If it is a runtime exception It is your fault".


2) Compile-time (I/O) Exception / Checked Exception :-
        An I/O Exception is also known as a checked exception.
        They are checked by the compile-time and the programmer is prompted to handle these exceptions.
        E.X. :-    a) Trying to open a file that doesn't exist results in FileNotFoundException.
                   b) Trying to read past the end of a file.


----------------------------------------------------------------------------------------------------------------------------------------

Ways to Handle Exception :-

1) try-catch Block :-

    try{
        // Whatever you want to try that can throws Exception
    } catch (Exception e) {
        // Whatever you want to do we Exception occur
    }

    -- a) Exception Class is Parent of both RuntimeException & IOException
    -- b) RuntimeException Class is Parent of all RuntimeException like ArithmeticException, NullPointerException
    -- c) IOException Class if Parent of all I/O Exceptions

    Exception  <----- RuntimeException (Parent of all RuntimeExceptions)
               <----- IOException (Parent of all I/O Exceptions)


----------------------------------------------------------------------------------------------------------------------------------------

finally block :-
        1) In Java, we can also use the finally block after try..catch block.
        2) In this case, the finally block is always executed whether there is an exception inside
           the try block or not.
        3) It is a good practice to use finally block to include important cleanup code
           like closing a file or connection.

    Note :-  There are some cases when a finally block does not execute :-
             (a) Use of System.exit() method.
             (b) An Exception occur in the finally block.
             (c) The death of a thread.

    Important :-  finally use only once's in a program.

----------------------------------------------------------------------------------------------------------------------------------------

1) throw keyword :-
    The 'throw' keyword is used to explicitly throw a single exception

2) throws keyword :-
    We use the throws keyword in the method declaration to declare the type of exception
    that might occur within it.

----------------------------------------------------------------------------------------------------------------------------------------